# This is Git's per-user configuration file.
[core]
	editor = vim
	pager = diff-so-fancy | less --tabs=4 -RFX
	# pager = diff-so-fancy | less --tabs=4 -RFX
[include]
    # private/local gitconfig
    path = ~/.gitconfig.local
[color]
    diff = auto
    status = auto
    branch = auto
    ui = auto
[help]
    autocorrect = 1
[push]
    default = simple
[alias]
    # add
    a = add                           # add
    chunkyadd = add --patch           # stage commits chunk by chunk

    # via http://blog.apiaxle.com/post/handy-git-tips-to-stop-you-getting-fired/
    snapshot = !git stash save "snapshot: $(date)" && git stash apply "stash@{0}"
    snapshots = !git stash list --grep snapshot

    # via http://stackoverflow.com/questions/5188320/how-can-i-get-a-list-of-git-branches-ordered-by-most-recent-commit
    recent-branches = !git for-each-ref --count=15 --sort=-committerdate refs/heads/ --format='%(refname:short)'

    # branch
    b = branch -v                     # branch (verbose)

    # commit
    c = commit -m                     # commit with message
    cam = commit -am                  # commit all with message
    ci = commit                       # commit
    amend = commit --amend            # ammend your last commit
    ammend = commit --amend           # ammend your last commit

    # checkout
    co = checkout                     # checkout
    nb = checkout -b                  # create and switch to a new branch (mnemonic: "git new branch branchname...")

    # config
    alias = config --get-regexp alias # list all aliases
    cfl= config --local
    cfll = config --local --list
    cfle = config --local --edit
    cfg = config --global
    cfs = config --system

    # cherry-pick
    cp = cherry-pick -x               # grab a change from a branch

    # diff
    d = diff                          # diff unstaged changes
    dc = diff --cached                # diff staged changes
    last = diff HEAD^                 # diff last committed change

    # log
    l = log --graph --date=short
    lo = log --graph --date=short --oneline
    changes = log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\" --name-status
    short = log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\"
    simple = log --pretty=format:\" * %s\"
    shortnocolor = log --pretty=format:\"%h %cr %cn %s\"

    # pull
    pl = pull                         # pull

    # push
    ps = push                         # push

    # rebase
    rb = rebase
    rc = rebase --continue            # continue rebase
    rs = rebase --skip                # skip rebase

    # remote
    r = remote -v                     # show remotes (verbose)

    # reset
    rh  = reset HEAD
    rhh  = reset --hard HEAD
    uncommit = reset --soft HEAD^     # go back before last commit, with files in uncommitted state
    filelog = log -u                  # show changes to a file
    mt = mergetool                    # fire up the merge tool

    # submodule
    # https://developer.atlassian.com/blog/2015/05/the-power-of-git-subtree/
    sba = "!f() { git subtree add --prefix $2 $1 master --squash;  }; f"
    sbu = "!f() { git subtree pull --prefix $2 $1 master --squash;  }; f"

    # stash
    ss = stash                        # stash changes
    sl = stash list                   # list stashes
    sa = stash apply                  # apply stash (restore changes)
    sd = stash drop                   # drop stashes (destory changes)

    # status
    s = status                        # status
    st = status                       # status
    stat = status                     # status

    # tag
    t = tag -n                        # show tags with <n> lines of each tag message

    # show
    sh = show                         # show

    # fetch
    fo = fetch origin                 # fetch
[init]
	defaultBranch = main
[interactive]
	diffFilter = diff-so-fancy --patch
